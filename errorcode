import cv2 as cv
import numpy as np
from math import atan2, cos, sin, sqrt, pi
import sys


def atan2_from_point(x, y, origin_x=0, origin_y=0):
    # Translate coordinates relative to new origin
    translated_x = x - origin_x
    translated_y = y - origin_y
      
    
    # Calculate angle using translated coordinates
    #(q,p)=atan2_from_point(dx,dy,(tx+rx)/2,(ty+rx)/2)
    angle = np.degrees(atan2(translated_y, translated_x))
    return angle

    


cap = cv.VideoCapture(0)
while(1):
    ret, frame = cap.read()
    f1 = frame.copy()
    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    blur = cv.bilateralFilter(gray_frame, 9, 75, 75)
    img_canny = cv.Canny(blur, 150, 200)
    
    im = cv.imread('y.png')
    assert im is not None, "file could not be read, check with os.path.exists()"
    imgray = cv.cvtColor(im, cv.COLOR_BGR2GRAY)
    Y_canny = cv.Canny(imgray, 150, 200)
    contours1, hierarchy = cv.findContours(Y_canny, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
    contours2 = contours1[0]
    contours, hierarchy = cv.findContours(img_canny, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

    for i in contours:
        a = cv.matchShapes(contours2, i, 1, 0.0)
        
        if a < 0.1:
            rect = cv.minAreaRect(i)
            box = cv.boxPoints(rect)
            box = np.int_(box)
            
            cv.drawContours(f1, [box], 0, (255, 0, 0), 2)
           
            x1, y1 = box[0]
            x2, y2 = box[1]
            x3, y3 = box[2]
            x4, y4 = box[3]

            tx=0
            ty=0
            ry=0
            rx=0

            rect = cv.boundingRect(i)
            x, y, w, h = rect
               
            side1 = np.sqrt((x2-x1)**2 + (y2-y1)**2)
            side2 = np.sqrt((x3-x2)**2 + (y3-y2)**2)

            if side1 < side2:
                mid2 = ((x1 + x2)//2, (y1 + y2)//2)  
                mid1 = ((x3 + x4)//2, (y3 + y4)//2)  
            else:
                mid2 = ((x2 + x3)//2, (y2 + y3)//2) 
                mid1 = ((x4 + x1)//2, (y4 + y1)//2)  
            
            cv.line(f1, mid1, mid2, (255, 0, 0), 3)
            (tx,ty)=mid1
            (rx,ry)=mid2
            
            
            vert_start = (x + w//2, y + h) 
            vert_end = (x + w//2, y) 
            max_distance = 0
            max_distance_point = None
            l=[0,1,0]
            #print(i)
            # Calculate the perpendicular distance from each contour point to the line
            for cnt in i:
                for point in cnt:
                    d = point[0]
                    b = point[1]
                    
                    # Calculate the perpendicular distance using the formula:
                    # d = |Ax + By + C| / sqrt(A^2 + B^2)
                    # where (A, B) is the line slope and C is the y-intercept
                    A = mid1[1] - mid2[1]
                    B = mid2[0] - mid1[0]
                    C = mid2[1] * mid1[0] - mid2[0] * mid1[1]
                    distance = abs(A * a + B * b + C) / np.sqrt(A ** 2 + B ** 2)
                    if distance > max_distance:
                        max_distance = distance
                        print(distance)
                        max_distance_point = (d,b)
                        print(d,"dsvcsa",b)
                        cv.circle(f1, (d,b), 3, (0, 0, 0), 2)

                    # sys.exit()
                    #print(f"Perpendicular distance from ({a}, {b}) to the line: {distance:.2f}")

                    print(len(max_distance_point))
            
                    
            head1 = np.sqrt((tx-d)**2 + (ty-b)**2)    
            head2 = np.sqrt((rx-d)**2 + (ry-b)**2) 
            if head1 > head2:
                blue_line_angle = atan2_from_point(rx,ry,(tx+rx)/2,(ty+rx)/2)
                k=[rx-tx,-(ry-ty), 0]
                cv.circle(f1, (rx, ry), 3, (0, 0, 255), -1)
                
            else:
                blue_line_angle = atan2_from_point(tx,ty,(tx+rx)/2,(ty+rx)/2)
                k=[tx-rx, -(ty-ry), 0]
                cv.circle(f1, (tx, ty), 3, (0, 0, 255), -1)
            #n = get_vector_angle(mid1, mid2)
            
        

            
            
            vert_start = (x + w//2, y + h) 
            vert_end = (x + w//2, y)      
            cv.line(f1, vert_start, vert_end, (0, 255, 0), 3)
           
            
            green_line_angle = atan2_from_point(x + w//2, y + h,x + w//2,y + h//2)
            cv.circle(f1, (x + w//2, y + h), 3, (0, 0, 255), -1)
            #print(green_line_angle)

            #print(blue_line_angle, green_line_angle)
            angle_between =blue_line_angle - green_line_angle
            
            #print(blue_line_angle)
            
            #if -k[0]>0:
                #angle_between +=180
            
            cv.rectangle(f1, (x, y), (x + w, y + h), (0, 255, 0), 2)
            #cv.drawContours(f1, [i], -1, (255, 0, 0), 2)
        
            cv.putText(f1, "Detected", (100, 100), cv.FONT_HERSHEY_SIMPLEX, 3, (0, 255, 0), 4)
            
            cv.putText(f1, f"Angle Between Lines: {angle_between:.1f} deg",
                    (x - 10, y - 70), cv.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
            
        else:
            continue
            
    cv.imshow('f1', f1)
    
    k = cv.waitKey(5) & 0xFF
    if k == ord('q'):
        break

cv.destroyAllWindows()
