import cv2 as cv
import numpy as np
from math import atan2, cos, sin, sqrt, pi

def normalize_angle_360(angle):
   
    angle = angle % 360
    if angle < 0:
        angle += 360
    return angle

def get_vector_angle(p1, p2):
    
    dx = p2[0] - p1[0]
    dy = -(p2[1] - p1[1]) 
    angle = np.degrees(np.arctan2(dy, dx))
    
    angle = normalize_angle_360(90 - angle)
    return angle

cap = cv.VideoCapture(0)
while(1):
    ret, frame = cap.read()
    f1 = frame.copy()
    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    blur = cv.bilateralFilter(gray_frame, 9, 75, 75)
    img_canny = cv.Canny(blur, 150, 200)
    
    im = cv.imread('y.png')
    assert im is not None, "file could not be read, check with os.path.exists()"
    imgray = cv.cvtColor(im, cv.COLOR_BGR2GRAY)
    Y_canny = cv.Canny(imgray, 150, 200)
    contours1, hierarchy = cv.findContours(Y_canny, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
    contours2 = contours1[0]
    contours, hierarchy = cv.findContours(img_canny, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

    for i in contours:
        a = cv.matchShapes(contours2, i, 1, 0.0)
        
        if a < 0.1:
            rect = cv.minAreaRect(i)
            box = cv.boxPoints(rect)
            box = np.int_(box)
            
            cv.drawContours(f1, [box], 0, (255, 0, 0), 2)
           
            x1, y1 = box[0]
            x2, y2 = box[1]
            x3, y3 = box[2]
            x4, y4 = box[3]
            
            side1 = np.sqrt((x2-x1)**2 + (y2-y1)**2)
            side2 = np.sqrt((x3-x2)**2 + (y3-y2)**2)

            if side1 < side2:
                mid2 = ((x1 + x2)//2, (y1 + y2)//2)  
                mid1 = ((x3 + x4)//2, (y3 + y4)//2)  
            else:
                mid2 = ((x2 + x3)//2, (y2 + y3)//2) 
                mid1 = ((x4 + x1)//2, (y4 + y1)//2)  
            
            cv.line(f1, mid1, mid2, (255, 0, 0), 3)
            
            
            rect = cv.boundingRect(i)
            x, y, w, h = rect
            
            vert_start = (x + w//2, y + h) 
            vert_end = (x + w//2, y)      
            cv.line(f1, vert_start, vert_end, (0, 255, 0), 3)
            blue_line_angle = get_vector_angle(mid1, mid2)
            green_line_angle = 0  
            angle_between = normalize_angle_360(blue_line_angle - green_line_angle)
            
            cv.rectangle(f1, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv.drawContours(f1, [i], -1, (255, 0, 0), 2)
        
            cv.putText(f1, "Detected", (100, 100), cv.FONT_HERSHEY_SIMPLEX, 3, (0, 255, 0), 4)
            
            cv.putText(f1, f"Angle Between Lines: {angle_between:.1f} deg",
                      (x - 10, y - 70), cv.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
            
        else:
            continue
            
    cv.imshow('f1', f1)
    
    k = cv.waitKey(5) & 0xFF
    if k == ord('q'):
        break

cv.destroyAllWindows()
